{"version":3,"sources":["components/Card.js","components/Playboard.js","components/Navbar.js","App.js","index.js"],"names":["Card","img","name","onClickCard","onClick","onMouseMove","e","el","currentTarget","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height","style","transform","onMouseOut","className","src","alt","preventDefault","Playboard","data","useState","cards","setCards","randomize","array","arrCpy","result","length","index","Math","floor","random","push","splice","handleCardClick","console","log","target","querySelector","textContent","useEffect","map","image","Navbar","score","bestScore","App","setScore","selectedCards","setSelectedCards","setBestScore","cardData","slice","cardName","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+0KAqCeA,MAnCf,YAAyC,IAA1BC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,YAkBtB,OACI,qBAAKC,QAASD,EAAaE,YAjBP,SAAAC,GACpB,IAAMC,EAAKD,EAAEE,cAAcC,wBACvBC,GAAKJ,EAAEK,SAAWJ,EAAGK,KAAKL,EAAGM,MAAM,IAAIN,EAAGM,MAAM,EAChDC,GAAKR,EAAES,SAAWR,EAAGS,IAAIT,EAAGU,OAAO,IAAIV,EAAGU,OAAO,EAErDX,EAAEE,cAAcU,MAAMC,UAAtB,mBAA8CL,EAA9C,cAAqDJ,EAArD,eAYyDU,WALtC,SAAAd,GACnBA,EAAEE,cAAcU,MAAMC,UAAY,IAImDE,UAAU,OAA/F,SACQ,sBAAKA,UAAU,gBAAf,UACI,qBACIC,IAAKrB,EACLoB,UAAU,qBACVE,IAAI,iBACJnB,QAfA,SAAAE,GAChBA,EAAEkB,oBAgBU,mBAAGF,IAAI,GAAGD,UAAU,sBAApB,SACKnB,UCUVuB,MArCf,YAAyC,IAArBC,EAAoB,EAApBA,KAAMvB,EAAc,EAAdA,YAEtB,EAA0BwB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,SAASC,EAAUC,GAIf,IAHA,IAAIC,EAAM,YAAOD,GACbE,EAAS,GAEW,GAAjBD,EAAOE,QAAa,CACvB,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOE,QAC9CD,EAAOM,KAAKP,EAAOG,IACnBH,EAAOQ,OAAOL,EAAO,GAGzB,OAAOF,EAIX,IAAMQ,EAAkB,SAAAnC,GACpBoC,QAAQC,IAAIrC,EAAEsC,OAAOC,cAAc,wBAAwBC,aAC3D3C,EAAYG,EAAEsC,OAAOC,cAAc,wBAAwBC,aAC3DjB,EAASC,EAAUJ,KAOvB,OAJAqB,qBAAU,WACNlB,EAASC,EAAUJ,MACpB,IAGC,qBAAKL,UAAU,YAAf,SACKO,EAAMoB,KAAI,SAAAzC,GACf,OAAO,cAAC,EAAD,CAAMJ,YAAasC,EAAiBvC,KAAMK,EAAGL,KAAMD,IAAKM,EAAG0C,c,MCb3DC,MAnBf,YAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UAEpB,OACI,qBAAK/B,UAAU,SAAf,SACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,mBAAGA,UAAU,gBACb,4BAAI8B,OAER,sBAAK9B,UAAU,wBAAf,UACI,mBAAGA,UAAU,kBACb,4BAAI+B,a,aCwBTC,MA/Bf,WAEE,MAA0B1B,mBAAS,GAAnC,mBAAOwB,EAAP,KAAcG,EAAd,KACA,EAA0C3B,mBAAS,IAAnD,mBAAO4B,EAAP,KAAsBC,EAAtB,KACA,EAAkC7B,mBAAS,GAA3C,mBAAOyB,EAAP,KAAkBK,EAAlB,KACMC,EAAWhC,EAAKiC,MAAM,EAAE,IAe9B,OACA,sBAAKtC,UAAU,YAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,oBAAIA,UAAU,gBAAd,2BAEF,cAAC,EAAD,CAAWK,KAAMgC,EAAUvD,YAlBL,SAACyD,GACnBL,EAAcM,SAASD,IAOzBN,EAAS,GACTE,EAAiB,MAPjBA,EAAiB,GAAD,mBAAKD,GAAL,CAAoBK,KACjCT,EAAM,EAAIC,GACXK,EAAaN,EAAM,GACrBG,EAASH,EAAM,OAcjB,cAAC,EAAD,CAAQA,MAAOA,EAAOC,UAAWA,Q,MC3BrCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f90a8e44.chunk.js","sourcesContent":["import '../styles/Card.css';\r\n\r\nfunction Card({img, name, onClickCard}) {\r\n\r\n    const handleMouseMove = e => {\r\n        const el = e.currentTarget.getBoundingClientRect();\r\n        let x = (e.clientX - (el.left+el.width/2))/el.width*2;\r\n        let y = (e.clientY - (el.top+el.height/2))/el.height*2;\r\n\r\n        e.currentTarget.style.transform = `rotate3d(${y}, ${-x}, 0, 6deg)`;\r\n    } \r\n\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const handleMouseOut = e => {\r\n        e.currentTarget.style.transform = '';\r\n    }\r\n\r\n    return (\r\n        <div onClick={onClickCard} onMouseMove={handleMouseMove} onMouseOut={handleMouseOut} className=\"card\">\r\n                <div className=\"card__content\">\r\n                    <img \r\n                        src={img} \r\n                        className=\"card__content__img\" \r\n                        alt=\"Card thumbnail\"\r\n                        onClick={handleClick}\r\n                    />\r\n                    <p src=\"\" className=\"card__content__text\">\r\n                        {name}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\nimport {useEffect, useState} from 'react';\r\n\r\nfunction Playboard({data, onClickCard}) {\r\n\r\n    const [cards, setCards] = useState([]);\r\n\r\n    function randomize(array) {\r\n        let arrCpy = [...array];\r\n        let result = [];\r\n\r\n        while (arrCpy.length != 0) {\r\n            let index = Math.floor(Math.random() * arrCpy.length);\r\n            result.push(arrCpy[index]);\r\n            arrCpy.splice(index, 1);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n\r\n    const handleCardClick = e => {\r\n        console.log(e.target.querySelector('.card__content__text').textContent);\r\n        onClickCard(e.target.querySelector('.card__content__text').textContent);\r\n        setCards(randomize(data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCards(randomize(data));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"playboard\">\r\n            {cards.map(el => {\r\n        return <Card onClickCard={handleCardClick} name={el.name} img={el.image} />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Playboard;","import '../styles/Navbar.css';\r\n\r\nfunction Navbar({score, bestScore}) {\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"scoreboard\">\r\n                <div className=\"scoreboard__score\">\r\n                    <i className=\"far fa-star\"></i>\r\n                    <p>{score}</p>\r\n                </div>\r\n                <div className=\"scoreboard__bestscore\">\r\n                    <i className=\"fas fa-trophy\"></i>\r\n                    <p>{bestScore}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Navbar;","import {useState} from 'react';\r\nimport Playboard from './components/Playboard';\r\nimport Navbar from './components/Navbar';\r\nimport data from './data.json';\r\nimport './styles/Header.css';\r\n\r\nfunction App() {\r\n\r\n  const [score, setScore] = useState(0);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [bestScore, setBestScore] = useState(0);\r\n  const cardData = data.slice(0,12);\r\n\r\n  const addSelectedCard = (cardName) => {\r\n    if(!selectedCards.includes(cardName)) {\r\n      setSelectedCards([...selectedCards, cardName]);\r\n      if(score+1 > bestScore)\r\n        setBestScore(score+1);\r\n      setScore(score+1);\r\n    }\r\n    else {\r\n      setScore(0);\r\n      setSelectedCards([]);\r\n    }\r\n  }\r\n\r\n  return (\r\n  <div className=\"container\">\r\n    <header className=\"header\">\r\n      <h1 className=\"header__title\">Memory Card</h1>\r\n    </header>\r\n    <Playboard data={cardData} onClickCard={addSelectedCard}/>\r\n    <Navbar score={score} bestScore={bestScore}/>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/style.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}